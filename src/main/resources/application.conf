akka {
      loglevel = "DEBUG"
      actor.allow-java-serialization = true
}

mySpecialConfig {
    akka {
        loglevel = INFO
    }
}

# timed assertions test config
specialTimedAssertionsConfig {
    akka.test.single-expect-default = 0.3s
}

# intercepting log messages test
interceptingLogMessages {
    akka {
    loggers = ["akka.testkit.TestEventListener"]
    test {
        filter-leeway = 5s
    }
    }
}

# routers demo
routersDemo {
    akka {
        actor.deployment {
            /poolMaster2 {
                router = round-robin-pool
                nr-of instances = 5
            }
            /groupMaster2 {
                router = round-robin-group
                routees.paths = ["/user/slave_1", "/user/slave_2", "/user/slave_3", "/user/slave_4", "/user/slave_5"]
            }
        }
    }
}


# dispatchers demo
my-dispatcher {
    type = Dispatcher # PinnedDispatcher, CallingThreadDispatcher
    executor = "thread-pool-executor"
    thread-pool-executor {
        fixed-pool-size = 3 #number of threads, so only 3 actors are scheduled at any time
    }
    throughput = 30 # the number of messages the dispatcher can handle for an actor until the threads moves to another actor
}

dispatchersDemo {
    akka.actor.deployment {
        /sam { # this is the actor path
            dispatcher = my-dispatcher # actor with that path attached itself to this dispatcher
        }
    }
}

# mailboxes demo

mailboxesDemo {
    # attaching mailbox to dispatcher
    support-ticket-dispatcher {
        mailbox-type = "part5infra.Mailboxes$SupportTicketPriorityMailbox" # fully qualified class name
    }

    control-mailbox {
        mailbox-type = "akka.dispatch.UnboundedControlAwareMailbox"
    }

    akka.actor.deployment {
        /altControlAwareActor {
            mailbox = control-mailbox
        }
    }
}